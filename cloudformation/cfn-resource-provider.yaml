AWSTemplateFormatVersion: '2010-09-09'
Description: Custom CloudFormation Provider
Parameters:
  AppVPC:
    Type: String
    Default: ''
  PrivateSubnets:
    Type: CommaDelimitedList
    Default: ''
  DefaultSecurityGroup:
    Type: String
    Default: ''
  S3BucketPrefix:
    Type: String
    Default: ''
  FunctionName:
    Type: String
    Default: cfn-custom-provider-template
  CFNCustomProviderZipFileName:
    Type: String
    Default: lambdas/cfn-custom-provider-template-latest.zip
Conditions:
  DoNotAttachToVpc: !Equals
    - !Ref 'AppVPC'
    - ''
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: !Sub "lambda-${FunctionName}-execution"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # for register workspace see https://forums.aws.amazon.com/thread.jspa?messageID=949085#949085
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories
                  - ds:AuthorizeApplication
                  - ds:UnauthorizeApplication
                Resource: '*'
              - Effect: Allow
                Action:
                  # Workspaces
                  #- workspaces:AssociateIpGroups
                  #- workspaces:AuthorizeIpRules
                  #- workspaces:CopyWorkspaceImage
                  #- workspaces:CreateIpGroup
                  #- workspaces:CreateTags
                  #- workspaces:CreateWorkspaces
                  #- workspaces:DeleteIpGroup
                  #- workspaces:DeleteTags
                  #- workspaces:DeleteWorkspaceImage
                  - workspaces:DeregisterWorkspaceDirectory
                  #- workspaces:DescribeAccount
                  #- workspaces:DescribeAccountModifications
                  #- workspaces:DescribeClientProperties
                  #- workspaces:DescribeIpGroups
                  #- workspaces:DescribeTags
                  - workspaces:DescribeWorkspaceDirectories
                  #- workspaces:DisassociateIpGroups
                  #- workspaces:ImportWorkspaceImage
                  #- workspaces:ListAvailableManagementCidrRanges
                  #- workspaces:MigrateWorkspace
                  #- workspaces:ModifyAccount
                  - workspaces:ModifyClientProperties
                  - workspaces:ModifySelfservicePermissions
                  - workspaces:ModifyWorkspaceAccessProperties
                  - workspaces:ModifyWorkspaceCreationProperties
                  #- workspaces:ModifyWorkspaceProperties
                  #- workspaces:ModifyWorkspaceState
                  #- workspaces:RebootWorkspaces
                  #- workspaces:RebuildWorkspaces
                  - workspaces:RegisterWorkspaceDirectory
                  #- workspaces:RestoreWorkspace
                  #- workspaces:RevokeIpRules
                  #- workspaces:StartWorkspaces
                  #- workspaces:StopWorkspaces
                  #- workspaces:TerminateWorkspaces
                  #- workspaces:UpdateRulesOfIpGroup
                Resource: !Sub 'arn:aws:workspaces:${AWS::Region}:${AWS::AccountId}:*/*'
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeInternetGateways
                  - ec2:DescribeSubnets
                  - ec2:DescribeRouteTables
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DeleteSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:GetRoleProperty
                Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/workspaces_DefaultRole*'
              # User Management
              - Effect: Allow
                Action:
                  - workdocs:ActivateUser
                  - workdocs:AddUserToGroup
                  - workdocs:CreateUser
                  - workdocs:DeactivateUser
                  - workdocs:DeleteUser
                  - workdocs:DescribeAvailableDirectories
                  - workdocs:DescribeUsers
                  - workdocs:GetCurrentUser
                  - workdocs:RegisterDirectory
                Resource: '*'
  CFNCustomProvider:
    Type: AWS::Lambda::Function
    Properties:
      Description: Custom CloudFormation Provider implementation
      Code:
        S3Bucket: !Sub '${S3BucketPrefix}-${AWS::Region}'
        S3Key: !Ref 'CFNCustomProviderZipFileName'
      FunctionName: !Ref 'FunctionName'
      Handler: provider.handler
      Timeout: 900
      MemorySize: 128
      Role: !GetAtt 'LambdaRole.Arn'
      VpcConfig: !If
        - DoNotAttachToVpc
        - !Ref 'AWS::NoValue'
        - SecurityGroupIds:
            - !Ref 'DefaultSecurityGroup'
          SubnetIds: !Ref 'PrivateSubnets'
      Runtime: python3.7
  # Logging group and permissions
  CFNCustomProviderLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn:
      - CFNCustomProvider
    Properties:
      LogGroupName: !Sub /aws/lambda/${CFNCustomProvider}
      RetentionInDays: 7
  LambdaLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'LambdaRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !GetAtt 'CFNCustomProviderLogGroup.Arn'
      PolicyName: !Sub "lambda-${FunctionName}-logging"
  # Required for asynchronous re-invoke
  LambdaReinvokePolicy:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
        - !Ref 'LambdaRole'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt 'CFNCustomProvider.Arn'
      PolicyName: !Sub "lambda-${FunctionName}-invoke"
